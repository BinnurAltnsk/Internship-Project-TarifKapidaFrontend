{"ast":null,"code":"// Profil resmi yükleme için yardımcı fonksiyonlar\nexport const pickImage = async (options = {}) => {\n  const {\n    maxSize = 2 * 1024 * 1024,\n    // 2MB default\n    quality = 0.2,\n    aspect = [1, 1]\n  } = options;\n  try {\n    // Web platformu için özel kontrol\n    if (typeof window !== 'undefined') {\n      // Web için input elementi oluştur\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'image/*';\n      input.style.display = 'none';\n      document.body.appendChild(input);\n      return new Promise((resolve, reject) => {\n        input.onchange = async event => {\n          const file = event.target.files[0];\n          if (!file) {\n            document.body.removeChild(input);\n            resolve(null);\n            return;\n          }\n\n          // Dosya boyutu kontrolü\n          if (file.size > maxSize) {\n            // Resmi yeniden boyutlandır\n            try {\n              const img = new Image();\n              img.src = URL.createObjectURL(file);\n              img.onload = () => {\n                const canvas = document.createElement('canvas');\n                const ctx = canvas.getContext('2d');\n\n                // Orijinal en-boy oranını koru\n                const maxDimension = 1200; // maksimum boyut\n                let width = img.width;\n                let height = img.height;\n                if (width > height && width > maxDimension) {\n                  height = height * maxDimension / width;\n                  width = maxDimension;\n                } else if (height > maxDimension) {\n                  width = width * maxDimension / height;\n                  height = maxDimension;\n                }\n                canvas.width = width;\n                canvas.height = height;\n                ctx.drawImage(img, 0, 0, width, height);\n\n                // Düşük kalitede JPEG olarak kaydet\n                canvas.toBlob(blob => {\n                  const reader = new FileReader();\n                  reader.onload = e => {\n                    const base64 = e.target.result.split(',')[1];\n                    document.body.removeChild(input);\n                    resolve({\n                      uri: URL.createObjectURL(blob),\n                      base64: `data:image/jpeg;base64,${base64}`\n                    });\n                  };\n                  reader.readAsDataURL(blob);\n                }, 'image/jpeg', quality);\n              };\n            } catch (error) {\n              console.error('Resim işlenirken hata:', error);\n              document.body.removeChild(input);\n              resolve(null);\n            }\n            return;\n          }\n          try {\n            const reader = new FileReader();\n            reader.onload = e => {\n              const base64 = e.target.result.split(',')[1];\n              document.body.removeChild(input);\n              resolve({\n                uri: URL.createObjectURL(file),\n                base64: `data:image/jpeg;base64,${base64}`\n              });\n            };\n            reader.onerror = () => {\n              document.body.removeChild(input);\n              reject(new Error('Dosya okuma hatası'));\n            };\n            reader.readAsDataURL(file);\n          } catch (error) {\n            document.body.removeChild(input);\n            reject(error);\n          }\n        };\n        input.click();\n      });\n    }\n\n    // Mobil platformlar için (React Native)\n    console.warn('Mobil platform için ImagePicker kullanılmalı');\n    return null;\n  } catch (error) {\n    console.error('Error picking image:', error);\n    return null;\n  }\n};\n\n// Profil resmi için özel fonksiyon\nexport const pickProfileImage = async (options = {}) => {\n  const {\n    maxSize = 2 * 1024 * 1024,\n    // 2MB - profil resimleri için\n    quality = 0.2,\n    // Profil resimleri için düşük kalite\n    aspect = [1, 1] // Profil resimleri için 1:1 oranı\n  } = options;\n  return await pickImage({\n    maxSize,\n    quality,\n    aspect\n  });\n};","map":{"version":3,"names":["pickImage","options","maxSize","quality","aspect","window","input","document","createElement","type","accept","style","display","body","appendChild","Promise","resolve","reject","onchange","event","file","target","files","removeChild","size","img","Image","src","URL","createObjectURL","onload","canvas","ctx","getContext","maxDimension","width","height","drawImage","toBlob","blob","reader","FileReader","e","base64","result","split","uri","readAsDataURL","error","console","onerror","Error","click","warn","pickProfileImage"],"sources":["C:/Users/x_user/Desktop/Internship-Project-TarifKapidaFrontend/src/utils/imageUtils.js"],"sourcesContent":["// Profil resmi yükleme için yardımcı fonksiyonlar\r\nexport const pickImage = async (options = {}) => {\r\n    const {\r\n        maxSize = 2 * 1024 * 1024, // 2MB default\r\n        quality = 0.2,\r\n        aspect = [1, 1]\r\n    } = options;\r\n\r\n    try {\r\n        // Web platformu için özel kontrol\r\n        if (typeof window !== 'undefined') {\r\n            // Web için input elementi oluştur\r\n            const input = document.createElement('input');\r\n            input.type = 'file';\r\n            input.accept = 'image/*';\r\n            input.style.display = 'none';\r\n            document.body.appendChild(input);\r\n\r\n            return new Promise((resolve, reject) => {\r\n                input.onchange = async (event) => {\r\n                    const file = event.target.files[0];\r\n                    if (!file) {\r\n                        document.body.removeChild(input);\r\n                        resolve(null);\r\n                        return;\r\n                    }\r\n\r\n                    // Dosya boyutu kontrolü\r\n                    if (file.size > maxSize) {\r\n                        // Resmi yeniden boyutlandır\r\n                        try {\r\n                            const img = new Image();\r\n                            img.src = URL.createObjectURL(file);\r\n                            \r\n                            img.onload = () => {\r\n                                const canvas = document.createElement('canvas');\r\n                                const ctx = canvas.getContext('2d');\r\n                                \r\n                                // Orijinal en-boy oranını koru\r\n                                const maxDimension = 1200; // maksimum boyut\r\n                                let width = img.width;\r\n                                let height = img.height;\r\n                                \r\n                                if (width > height && width > maxDimension) {\r\n                                    height = (height * maxDimension) / width;\r\n                                    width = maxDimension;\r\n                                } else if (height > maxDimension) {\r\n                                    width = (width * maxDimension) / height;\r\n                                    height = maxDimension;\r\n                                }\r\n                                \r\n                                canvas.width = width;\r\n                                canvas.height = height;\r\n                                ctx.drawImage(img, 0, 0, width, height);\r\n                                \r\n                                // Düşük kalitede JPEG olarak kaydet\r\n                                canvas.toBlob((blob) => {\r\n                                    const reader = new FileReader();\r\n                                    reader.onload = (e) => {\r\n                                        const base64 = e.target.result.split(',')[1];\r\n                                        document.body.removeChild(input);\r\n                                        resolve({\r\n                                            uri: URL.createObjectURL(blob),\r\n                                            base64: `data:image/jpeg;base64,${base64}`\r\n                                        });\r\n                                    };\r\n                                    reader.readAsDataURL(blob);\r\n                                }, 'image/jpeg', quality);\r\n                            };\r\n                        } catch (error) {\r\n                            console.error('Resim işlenirken hata:', error);\r\n                            document.body.removeChild(input);\r\n                            resolve(null);\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        const reader = new FileReader();\r\n                        reader.onload = (e) => {\r\n                            const base64 = e.target.result.split(',')[1];\r\n                            document.body.removeChild(input);\r\n                            resolve({\r\n                                uri: URL.createObjectURL(file),\r\n                                base64: `data:image/jpeg;base64,${base64}`\r\n                            });\r\n                        };\r\n                        reader.onerror = () => {\r\n                            document.body.removeChild(input);\r\n                            reject(new Error('Dosya okuma hatası'));\r\n                        };\r\n                        reader.readAsDataURL(file);\r\n                    } catch (error) {\r\n                        document.body.removeChild(input);\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                input.click();\r\n            });\r\n        }\r\n\r\n        // Mobil platformlar için (React Native)\r\n        console.warn('Mobil platform için ImagePicker kullanılmalı');\r\n        return null;\r\n    } catch (error) {\r\n        console.error('Error picking image:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Profil resmi için özel fonksiyon\r\nexport const pickProfileImage = async (options = {}) => {\r\n    const {\r\n        maxSize = 2 * 1024 * 1024, // 2MB - profil resimleri için\r\n        quality = 0.2, // Profil resimleri için düşük kalite\r\n        aspect = [1, 1] // Profil resimleri için 1:1 oranı\r\n    } = options;\r\n\r\n    return await pickImage({ maxSize, quality, aspect });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}